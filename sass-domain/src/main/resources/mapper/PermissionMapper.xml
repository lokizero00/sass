<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.loki.sass.domain.mapper.PermissionMapper">
  <resultMap id="BaseResultMap" type="com.loki.sass.domain.model.Permission">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="resource_type" jdbcType="VARCHAR" property="resourceType" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="permission" jdbcType="VARCHAR" property="permission" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="available" jdbcType="INTEGER" property="available" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_regional" jdbcType="INTEGER" property="isRegional" />
    <result column="is_deleted" jdbcType="INTEGER" property="isDeleted" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, resource_type, url, permission, parent_id, available, create_by, update_by, 
    create_time, update_time, is_regional, is_deleted
  </sql>
  <select id="selectByExample" parameterType="com.loki.sass.domain.model.PermissionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from permission
    <where>
      is_deleted = 0
    </where>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="offset != null &amp;&amp; limit!=null">
      limit ${offset},${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from permission
    where id = #{id,jdbcType=INTEGER} and is_deleted = 0
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from permission
    where id = #{id,jdbcType=INTEGER} and is_deleted = 0
  </delete>
  <delete id="deleteByExample" parameterType="com.loki.sass.domain.model.PermissionExample">
    delete from permission
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <where>
      is_deleted = 0
    </where>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.loki.sass.domain.model.Permission" useGeneratedKeys="true">
    insert into permission (name, resource_type, url, 
      permission, parent_id, available, 
      create_by, update_by, create_time, 
      update_time, is_regional, is_deleted
      )
    values (#{name,jdbcType=VARCHAR}, #{resourceType,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, 
      #{permission,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}, #{available,jdbcType=INTEGER}, 
      #{createBy,jdbcType=INTEGER}, #{updateBy,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{isRegional,jdbcType=INTEGER}, #{isDeleted,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.loki.sass.domain.model.Permission" useGeneratedKeys="true">
    insert into permission
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="resourceType != null">
        resource_type,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="permission != null">
        permission,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="available != null">
        available,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isRegional != null">
        is_regional,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="resourceType != null">
        #{resourceType,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="permission != null">
        #{permission,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="available != null">
        #{available,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isRegional != null">
        #{isRegional,jdbcType=INTEGER},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.loki.sass.domain.model.PermissionExample" resultType="java.lang.Long">
    select count(*) from permission
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <where>
      is_deleted = 0
    </where>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update permission
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.resourceType != null">
        resource_type = #{record.resourceType,jdbcType=VARCHAR},
      </if>
      <if test="record.url != null">
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.permission != null">
        permission = #{record.permission,jdbcType=VARCHAR},
      </if>
      <if test="record.parentId != null">
        parent_id = #{record.parentId,jdbcType=INTEGER},
      </if>
      <if test="record.available != null">
        available = #{record.available,jdbcType=INTEGER},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isRegional != null">
        is_regional = #{record.isRegional,jdbcType=INTEGER},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=INTEGER},
      </if>
    </set>
    <where>
      is_deleted = 0
    </where>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update permission
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      resource_type = #{record.resourceType,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      permission = #{record.permission,jdbcType=VARCHAR},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      available = #{record.available,jdbcType=INTEGER},
      create_by = #{record.createBy,jdbcType=INTEGER},
      update_by = #{record.updateBy,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      is_regional = #{record.isRegional,jdbcType=INTEGER},
      is_deleted = #{record.isDeleted,jdbcType=INTEGER}
    <where>
      is_deleted = 0
    </where>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.loki.sass.domain.model.Permission">
    update permission
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="resourceType != null">
        resource_type = #{resourceType,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="permission != null">
        permission = #{permission,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="available != null">
        available = #{available,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isRegional != null">
        is_regional = #{isRegional,jdbcType=INTEGER},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER} and is_deleted = 0
  </update>
  <update id="updateByPrimaryKey" parameterType="com.loki.sass.domain.model.Permission">
    update permission
    set name = #{name,jdbcType=VARCHAR},
      resource_type = #{resourceType,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      permission = #{permission,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=INTEGER},
      available = #{available,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=INTEGER},
      update_by = #{updateBy,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_regional = #{isRegional,jdbcType=INTEGER},
      is_deleted = #{isDeleted,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER} and is_deleted = 0
  </update>

  <select id="selectByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select p.*
    from permission p
    left join role_permission rp on p.id=rp.permission_id
    where  p.is_deleted=0 AND p.available=1 AND rp.role_id =#{roleId,jdbcType=INTEGER}
  </select>

  <select id="checkName" parameterType="String" resultType="Integer">
    select count(id) from permission where is_deleted = 0 and name=#{name}
  </select>

  <select id="count" parameterType="java.lang.Integer" resultType="Integer">
    select count(id) from permission where is_deleted = 0 and id=#{id}
  </select>

  <select id="selectButtonByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select p.*
    from permission p
           left join role_permission rp on p.id=rp.permission_id
    where  p.is_deleted=0 AND p.available=1 AND rp.role_id =#{roleId,jdbcType=INTEGER} AND p.resource_type='button'
  </select>

  <select id="selectByRoleIds" resultMap="BaseResultMap">
    select distinct p.*
    from permission p
    left join role_permission rp on p.id=rp.permission_id
    where p.is_deleted=0 AND p.available=1
    AND rp.role_id in
    <foreach collection="roleIdList" item="roleId" index="index" open="(" close=")" separator=",">
      #{roleId}
    </foreach>
  </select>

  <select id="countForList" parameterType="java.util.List" resultType="Integer">
    select count(1) from permission where is_deleted = 0 and id in
    <foreach collection="ids" item="item" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </select>

  <select id="selectRootList" resultMap="BaseResultMap">
    select p.*
    from permission p
    <where>
      p.is_deleted=0 AND p.available=1
      <if test="zoneId!=null and zoneId!=0">
        AND p.zone_id=#{zoneId}
      </if>
    </where>
  </select>

  <select id="selectListByParentId" parameterType="Integer" resultMap="BaseResultMap">
    select p.*
    from permission p
    where  p.is_deleted=0 AND p.available=1 AND p.parent_id=#{parentId}
  </select>
</mapper>