<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.loki.sass.domain.mapper.RegionMapper">
  <resultMap id="BaseResultMap" type="com.loki.sass.domain.model.Region">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="zone_id" jdbcType="INTEGER" property="zoneId" />
    <result column="property_id" jdbcType="INTEGER" property="propertyId" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="floor" jdbcType="INTEGER" property="floor" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_deleted" jdbcType="INTEGER" property="isDeleted" />
  </resultMap>

  <resultMap id="QueryResultMap" type="com.loki.sass.domain.po.RegionPO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="zone_id" jdbcType="INTEGER" property="zoneId" />
    <result column="zone_name" jdbcType="VARCHAR" property="zoneName" />
    <result column="property_id" jdbcType="INTEGER" property="propertyId" />
    <result column="property_name" jdbcType="VARCHAR" property="propertyName" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="floor" jdbcType="INTEGER" property="floor" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="create_by_name" jdbcType="VARCHAR" property="createByName" />
    <result column="update_by_name" jdbcType="VARCHAR" property="updateByName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_deleted" jdbcType="INTEGER" property="isDeleted" />
  </resultMap>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, description, zone_id, property_id, type, floor, parent_id, create_by, update_by, 
    create_time, update_time, is_deleted
  </sql>
  <select id="selectByExample" parameterType="com.loki.sass.domain.model.RegionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from region
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from region
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from region
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.loki.sass.domain.model.RegionExample">
    delete from region
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.loki.sass.domain.model.Region" useGeneratedKeys="true">
    insert into region (name, description, zone_id, 
      property_id, type, floor, 
      parent_id, create_by, update_by, 
      create_time, update_time, is_deleted
      )
    values (#{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{zoneId,jdbcType=INTEGER}, 
      #{propertyId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{floor,jdbcType=INTEGER}, 
      #{parentId,jdbcType=INTEGER}, #{createBy,jdbcType=INTEGER}, #{updateBy,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.loki.sass.domain.model.Region" useGeneratedKeys="true">
    insert into region
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="zoneId != null">
        zone_id,
      </if>
      <if test="propertyId != null">
        property_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="floor != null">
        floor,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="zoneId != null">
        #{zoneId,jdbcType=INTEGER},
      </if>
      <if test="propertyId != null">
        #{propertyId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="floor != null">
        #{floor,jdbcType=INTEGER},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.loki.sass.domain.model.RegionExample" resultType="java.lang.Long">
    select count(*) from region
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update region
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.zoneId != null">
        zone_id = #{record.zoneId,jdbcType=INTEGER},
      </if>
      <if test="record.propertyId != null">
        property_id = #{record.propertyId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.floor != null">
        floor = #{record.floor,jdbcType=INTEGER},
      </if>
      <if test="record.parentId != null">
        parent_id = #{record.parentId,jdbcType=INTEGER},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update region
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      zone_id = #{record.zoneId,jdbcType=INTEGER},
      property_id = #{record.propertyId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      floor = #{record.floor,jdbcType=INTEGER},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      create_by = #{record.createBy,jdbcType=INTEGER},
      update_by = #{record.updateBy,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{record.isDeleted,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.loki.sass.domain.model.Region">
    update region
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="zoneId != null">
        zone_id = #{zoneId,jdbcType=INTEGER},
      </if>
      <if test="propertyId != null">
        property_id = #{propertyId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="floor != null">
        floor = #{floor,jdbcType=INTEGER},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.loki.sass.domain.model.Region">
    update region
    set name = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      zone_id = #{zoneId,jdbcType=INTEGER},
      property_id = #{propertyId,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      floor = #{floor,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=INTEGER},
      update_by = #{updateBy,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectByParentId" resultMap="QueryResultMap">
    SELECT
      r.*,
      z.name AS zone_name,
      p.name AS property_name,
      ac.real_name AS create_by_name,
      au.real_name AS update_by_name
    FROM
      region r
        LEFT JOIN zone z ON z.id = r.zone_id
        LEFT JOIN property p ON p.id = r.property_id
        LEFT JOIN admin ac ON ac.id = r.create_by
        LEFT JOIN admin au ON au.id = r.update_by
    WHERE
      r.parent_id =#{parentId} and r.is_deleted=0
  </select>

  <select id="selectByZoneId" resultMap="QueryResultMap">
    SELECT
      r.*,
      z.name AS zone_name,
      p.name AS property_name,
      ac.real_name AS create_by_name,
      au.real_name AS update_by_name
    FROM
      region r
        LEFT JOIN zone z ON z.id = r.zone_id
        LEFT JOIN property p ON p.id = r.property_id
        LEFT JOIN admin ac ON ac.id = r.create_by
        LEFT JOIN admin au ON au.id = r.update_by
    WHERE
      r.zone_id =#{zoneId} and r.is_deleted=0 and r.parent_id=0
  </select>

  <select id="selectByPropertyId" resultMap="QueryResultMap">
    SELECT
      r.*,
      z.name AS zone_name,
      p.name AS property_name,
      ac.real_name AS create_by_name,
      au.real_name AS update_by_name
    FROM
      region r
        LEFT JOIN zone z ON z.id = r.zone_id
        LEFT JOIN property p ON p.id = r.property_id
        LEFT JOIN admin ac ON ac.id = r.create_by
        LEFT JOIN admin au ON au.id = r.update_by
    WHERE
      r.property_id =#{propertyId} and r.is_deleted=0 and r.parent_id=0
  </select>
</mapper>