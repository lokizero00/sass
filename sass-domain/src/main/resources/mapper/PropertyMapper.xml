<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.loki.sass.domain.mapper.PropertyMapper">
  <resultMap id="BaseResultMap" type="com.loki.sass.domain.model.Property">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="manager_name" jdbcType="VARCHAR" property="managerName" />
    <result column="manager_phone" jdbcType="VARCHAR" property="managerPhone" />
    <result column="zone_id" jdbcType="INTEGER" property="zoneId" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_deleted" jdbcType="INTEGER" property="isDeleted" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>

  <resultMap id="QueryResultMap" type="com.loki.sass.domain.po.PropertyPO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="manager_name" jdbcType="VARCHAR" property="managerName" />
    <result column="manager_phone" jdbcType="VARCHAR" property="managerPhone" />
    <result column="zone_id" jdbcType="INTEGER" property="zoneId" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_time_name" jdbcType="VARCHAR" property="createTimeName" />
    <result column="update_time_name" jdbcType="VARCHAR" property="updateTimeName" />
    <result column="zone_name" jdbcType="VARCHAR" property="zoneName" />
    <result column="is_deleted" jdbcType="INTEGER" property="isDeleted" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, manager_name, manager_phone, zone_id, create_by, update_by, create_time, 
    update_time, is_deleted, state
  </sql>
  <select id="selectByExample" parameterType="com.loki.sass.domain.model.PropertyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from property
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from property
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from property
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.loki.sass.domain.model.PropertyExample">
    delete from property
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.loki.sass.domain.model.Property" useGeneratedKeys="true">
    insert into property (name, manager_name, manager_phone, 
      zone_id, create_by, update_by, 
      create_time, update_time, is_deleted, 
      state)
    values (#{name,jdbcType=VARCHAR}, #{managerName,jdbcType=VARCHAR}, #{managerPhone,jdbcType=VARCHAR}, 
      #{zoneId,jdbcType=INTEGER}, #{createBy,jdbcType=INTEGER}, #{updateBy,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=INTEGER}, 
      #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.loki.sass.domain.model.Property" useGeneratedKeys="true">
    insert into property
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="managerName != null">
        manager_name,
      </if>
      <if test="managerPhone != null">
        manager_phone,
      </if>
      <if test="zoneId != null">
        zone_id,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="managerName != null">
        #{managerName,jdbcType=VARCHAR},
      </if>
      <if test="managerPhone != null">
        #{managerPhone,jdbcType=VARCHAR},
      </if>
      <if test="zoneId != null">
        #{zoneId,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.loki.sass.domain.model.PropertyExample" resultType="java.lang.Long">
    select count(*) from property
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update property
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.managerName != null">
        manager_name = #{record.managerName,jdbcType=VARCHAR},
      </if>
      <if test="record.managerPhone != null">
        manager_phone = #{record.managerPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.zoneId != null">
        zone_id = #{record.zoneId,jdbcType=INTEGER},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update property
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      manager_name = #{record.managerName,jdbcType=VARCHAR},
      manager_phone = #{record.managerPhone,jdbcType=VARCHAR},
      zone_id = #{record.zoneId,jdbcType=INTEGER},
      create_by = #{record.createBy,jdbcType=INTEGER},
      update_by = #{record.updateBy,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{record.isDeleted,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.loki.sass.domain.model.Property">
    update property
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="managerName != null">
        manager_name = #{managerName,jdbcType=VARCHAR},
      </if>
      <if test="managerPhone != null">
        manager_phone = #{managerPhone,jdbcType=VARCHAR},
      </if>
      <if test="zoneId != null">
        zone_id = #{zoneId,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.loki.sass.domain.model.Property">
    update property
    set name = #{name,jdbcType=VARCHAR},
      manager_name = #{managerName,jdbcType=VARCHAR},
      manager_phone = #{managerPhone,jdbcType=VARCHAR},
      zone_id = #{zoneId,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=INTEGER},
      update_by = #{updateBy,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="checkName" parameterType="String" resultType="Integer">
    select count(id) from property where is_deleted=0 and name=#{name} and zone_id=#{zoneId}
  </select>

  <select id="selectByParam" resultMap="QueryResultMap">
    select p.*,pc.real_name as create_by_name,pu.real_name as update_by_name,z.name as zone_name from property p
    left join admin pc on pc.id=p.create_by
    left join admin pu on pu.id=p.update_by
    left join zone z on z.id=p.zone_id
    <where>
      p.is_deleted=0
      <if test="name!=null and name!=''">
        and p.name like CONCAT('%',#{name},'%')
      </if>
      <if test="createByName!=null and createByName!=''">
        and pc.real_name like CONCAT('%',#{createByName},'%')
      </if>
      <if test="updateByName!=null and updateByName!=''">
        and pu.real_name like CONCAT('%',#{updateByName},'%')
      </if>
      <if test="zoneName!=null and zoneName!=''">
        and z.name like CONCAT('%',#{zoneName},'%')
      </if>
      <if test="zoneId!=null and zoneId!=0">
        and p.zone_id=#{zoneId}
      </if>
      <if test="propertyId!=null and propertyId!=0">
        and p.id=#{propertyId}
      </if>
      <if test="state!=null and state!=0">
        and p.state=#{state}
      </if>
    </where>
  </select>
</mapper>